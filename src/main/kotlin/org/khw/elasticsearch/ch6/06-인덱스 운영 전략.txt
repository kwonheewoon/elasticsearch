* 템플릿과 명시적 매핑 활용
    실제 서비스를 운형할 때는 매핑이 동적으로 생성되도록 하기보다는 최대한 명시적으로 매핑을 지정하는 것이 좋다.
    하지만 서비스 특성상 추후 인입되는 데이터를 완전히 컨트롤할 수 없는 경우라면 사전에 알지 못한 상태에서 신규 필드가 추가될 수 있다
    이런 상황이 예상되는 서비스라면 인덱스 템프릿과 동적 템플릿을 최대한 활용하는 편이 좋다.

* 라우팅 활용
    라우팅 지정은 성능을 유의미하게 상승시킨다. 사전에 서비스 요건과 데이터 특성 등을 면밀히 파악하고 어떤 값을 라우팅으로 지정해야 가장 효율적인지를
    설계해야 한다. 라우팅을 지정하기로 결정했다면 해당 인덱스에 접근하는 모든 클라이언트로 라우팅 정책 내용을 숙지하고 있어야 한다. 이를 위해
    인덱스 매핑에서 _routing을 true로 설정해 라우팅 지정을 필수로 제한하는 방법도 검토할 필요가 있다

* 시계열 인덱스 이름
    시계열 데이터를 색인한다면 인덱스 이름에도 시간값을 넣는 방법을 고려하자. 예를 들면, api=history-20210704나
    access-log-202109와 같이 이름에 시간 표현이 들어간 인덱스를 주기적으로 생성하는 방법이다.
    데이터가 인입되면 데이터 내 특정 필드의 값이나 색인시의 시간을 기준으로 잡고 적합한 인덱스에 색인한다.

    이런 방법을 선택하면 오래된 데이터를 백업하고 삭제하는 것이 편하다. 만약 하나의 인덱스에 데이터를 색인했다면
    range 쿼리를 이용해서 데이터를 백업하고 delete by query로 삭제를 수행해야 한다. 하지만 시계열 이름을 가진 인덱스라면
    옛날 인덱스를 통째로 백업하고 삭제하면 그만이다.
    데이터 노드를 hot-warm-cold-frozen 티어로 구분해 클러스터를 구성하는 데이터 티어 구조에도 좋다.
    시간이 지난 인덱스의 샤드를 통째로 hot 티어 노드에서 warm 티어 노드로 옮기면 되기 때문이다.

* alias
    alias는 이미 존재하는 인덱스를 다른 이름으로도 가리키도록 하는 기능이다. 한 alias가 하나 이상의 인덱스를 가리키도록 지정할 수도 있다.
    엘라스틱서치에서 인덱스 이름을 지정해야 하는거의 모든 곳에는 인덱스 이름 대신 alias를 넣을수 있다. alias는 다음과 같은 방법으로 지정한다.

    POST _aliases
    {
      "actions": [
        {
          "add": {
            "index": "my_index",
            "alias": "my_alias_name"
          }
        },
        {
          "add": {
            "index": "my-index",
            "alias": "my_alias_name",
            "is_write_index" : true
          }
        }
      ]
    }

    ** 여러 인덱스를 가리키는 alias는 단건 문서 조회 작업의 대상이 될 수 없다. 단일 인덱스를 가리키는 alias여야 한다.
    여러 인덱스를 가리키는 alias 안에 is_write_index를 지정한 인덱스가 없다면 쓰기 작업을 할 수 없다.

    * alias 지정 해제
    POST _aliases
    {
        {
          "remove": {
            "index": "my-index2",
            "alias": "my_alias_name"
          }
        }
      ]
    }

    alias 설정 확인
    GET _alias/my_alias_name

    response
    {
      "my_index": {
        "aliases": {
          "my_alias_name": {}
        }
      },
      "my-index": {
        "aliases": {
          "my_alias_name": {
            "is_write_index": true
          }
        }
      }
    }

    ** alias 활용
        단순 로그성 데이터가 아니라 서비스에 직접 활용되는 데이터를 들고 있는 인덱스나, 요건 등이 변할 것이 예상되는 인덱스라면 모두 alias를
        사전에 지정하는 것이 중요하다. 그리고 서비스에서는 실제 인덱스 이름이 아니라 이 alias를 가리키도록 설계해야 한다. 나중에 매핑이나 설정
        등에 큰 변화가 필요할 때 새 인덱스를 미리 만들고 alias가 가리키는 인덱스만 변경하면 운영 중에 새 인덱스로 넘어갈 수 있다.


* 롤오버
    alias에 여러 인덱스를 묶고 한 인덱스에만 is_write_true를 지정한 형태에서 쓰기를 담당하는 인덱스 내 샤드의 크기가 너무 커지면
    새로운 인덱스를 생성해서 같은 alias 안에 묶은 뒤 is_write_true를 새 인덱스로 옮기는 방식으로 운영한다.
    롤오버는 이러한 작업을 한 번에 묶어서 수행하는 기능이다. 다음과 같이 수행한다.

    POST [롤오버 대상]/_rollover
    여기서 롤오버 대상으로는 alias의 이름 또는 데이터 스트림의 이름이 들어간다.

    롤오버를 수행할 alias 내 is_write_true 인덱스의 이름은 반드시 ^.*-\ㅇ+$ 패턴을 따라야 한다.
    예를 들면 인덱스의 이름이 test-index-000001인 경우 롤오버가 가능하지만 test-index라면 롤오버가 수행되지 않는다.
    test-index-000001 인덱스가 is_write_true로 지정되어 있을 경우 롤오버를 수행하면 test-index-000002가 자동으로 생성되고
    is_write_true가 넘어간다.

    인덱스 이름의 숫자 부분은 반드시 여섯 자리일 필요는 없다. 그러나 롤오버가 자동으로 생성해 주는 이름은 숫자 부분을 여섯 자리로 맞춰서 생성된다.
    현재 is_write_true 인덱스가 test-index-0123라면 롤오버로 생성되는 인덱스 이름은 test-index-000124가 된다.

    또한 인덱스를 처음 생성할 때에는 인덱스 이름에 간단한 날짜 시간 계산식을 포함시켜 생성할 수 있다.
    <test-index-{now/d}-000001> 문자열을 URL 인코딩해서 요청해 인덱스 생성 가능


*ILM 정책 생성
 먼저, 필요한 ILM 정책을 생성합니다. 이 정책은 롤오버 조건(max_size, max_age, max_docs), 인덱스를 읽기 전용으로 전환하는 조건,
 그리고 인덱스의 삭제 조건을 정의합니다.

 PUT /_ilm/policy/user_department_policy
 {
   "policy": {
     "phases": {
       "hot": {
         "actions": {
           "rollover": {
             "max_size": "50GB",
             "max_age": "30d",
             "max_docs": 1000000
           },
           "set_priority": {
             "priority": 100
           }
         }
       },
       "warm": {
         "min_age": "30d",
         "actions": {
           "readonly": {},
           "set_priority": {
             "priority": 50
           }
         }
       },
       "delete": {
         "min_age": "90d",
         "actions": {
           "delete": {}
         }
       }
     }
   }
 }
 이 정책에서는 롤오버 조건을 설정하고, 30일이 지난 인덱스는 'warm' 단계로 옮기며 읽기 전용으로 설정합니다. 또한, 90일이 지난 인덱스는 자동으로 삭제합니다.

* 인덱스 템플릿 생성
 ILM 정책을 적용할 인덱스 템플릿을 생성합니다. 이 템플릿은 새로운 user_department 인덱스 시리즈에 자동으로 ILM 정책을 적용하도록 설정합니다.

 PUT /_index_template/user_department_template
 {
   "index_patterns": ["user_department-*"],
   "template": {
     "settings": {
       "number_of_shards": 1,
       "number_of_replicas": 1,
       "index.lifecycle.name": "user_department_policy",
       "index.lifecycle.rollover_alias": "user_department"
     }
   }
 }
 이 템플릿은 user_department-* 패턴에 맞는 모든 인덱스에 대해 설정됩니다. ILM 정책 이름(user_department_policy)과 롤오버 에일리어스(user_department)를 지정합니다.

 첫 번째 인덱스 및 에일리어스 생성
 ILM 정책과 연동하여 첫 번째 인덱스를 생성하고 적절한 에일리어스를 설정합니다.

 PUT /user_department-000001
 {
   "aliases": {
     "user_department": {
       "is_write_index": true
     }
   }
 }

이제, user_department-000001 인덱스가 생성되고 user_department라는 이름의 에일리어스가 설정됩니다. 이 인덱스는 쓰기 가능한 상태(is_write_index: true)로 설정되어,
새로운 문서가 이 인덱스로 인덱싱됩니다.

