* 명시적으로 세그먼트 병합하기
    세그먼트 병합을 수행한 이후에는 검색 성능의 향상, 디스크나 메모리 등의 자원 절약을 기대할 수 있다.
    forcemerge API를 통해 명시적으로 세그먼트 벼합을 수행할 수 있다.

    POST [인덱스 이름]/_forcemerge?max_num_segments=1

    max_num_segments에는 최대 몇 개의 세그먼트로 병합을 수행할지 지정한다. 관리적인 목적으로 수행할 때는 대부분 1로 지정하면 된다.
    지난 번에도 학습했듯이 명시적인 세그먼트 병합은 더 이상 추가 데이터가 색인되지 않는다는 것이 보장될 때 수행해야 한다.
    그리고 인덱스에 더 이상 변화가 없다면 단일 세그먼트를 유지하는 것이 가장 좋다.

    시계열 인덱스 이름 전략을 사용하면 이 부분에 있어서도 유리하다. 더 이상 추가 데이터가 들어오지 않는 인덱스를 구분하기 쉽기 때문이다.

    세그먼트 병합은 비용이 큰 작업이다. 그러므로 매일 한산한 시간대에 forcemerge를 수행하는 배치 작업을 걸어두는 등의 방법을 선택하는 것이 좋다.
    이런 주기적 작업은 인덱스 생명 주기 관리 정책을 이용하면 쉽게 반복 수행할 수 있다.


* 샤드 할당 필터링과 데이터 티어 구조
    환경에 따라 특정 샤드의 주 샤드와 복제본 샤드를 각각 원하는 특성의 노드에 분배해서 할당해야 할 때가 있다. 예를 들면 클러스터 내
    특정 노드 부분 집합은 전원공급 장치나 네트워크 장비 등 공통적인 하드웨어 설비의 영향을 받을 수 있다. 이런 상황이라면 클러스터를
    A 특성을 가진 노드 부분 집합과 B 특성을 가진 노드 부분 집합 등으로 구분한 뒤, 한 샤드의 주 샤드와 복제본 샤드를 서로 다른 부분 집합에 배분할 수 있다.
    엘라스틱서치를 기동시킬 때 노드에 원하는 커스텀 속성을 지정한 뒤 이를 기반으로 샤드 할당을 제어하면 된다. 이를 커스텀 노드 속성을
    샤드할당 의식 속성(awareness attributes)으로 지정한다고 표현한다. elasticsearch.yml에 다음과 같이 지정하면 된다.

    node.attr.my_rack_id: rack_one

    속성 이름은 자유롭게 지으면 된다. elasticsearch.yml에 직접 지정하는 대신 엘라스틱서치 기동시 다음과 같이 -E 옵션을 이용해서도 속성을 지정할 수 있다.

    $ bin/elasticsearch -Enode.attr.my_rack_id=rack_one

    GET _cat/nodeattrs?v

    노드 기동 시 속성을 지정했다고 바로 샤드 할당에 이 속성이 활요오디는 것은 아니다
    샤드 할당 시 이러한 속성을 고려하라고 클러스터에 알려줘야 한다. 다음 과 같이 cluster.routing.allocation.awareness.attributes 설정에
    추가한다. 여러 속성을 쉼표로 이어서 지정할 수도 있다.

    PUT _cluster/settings
    {
        "persistent" : {
            "cluster.routing.allocation.awareness.attributes" : "my_rack_id,my_other_id"
        }
    }

    my_rack_id가 rack_one인 노드 부분 집합과 rack_two인 노드 부분 집합으로 나눠 클러스터를 기동하면 엘라스틱서치는 동일한 샤드에 대해 주 샤드와
    복제본 샤드를 서로 다른 부분 집합에 배분한다. 다만 이렇게 우선 할당하는 것이 강제적 규칙은 아니다. rack_two로 설정된 노드가 전부 내려가는 등
    원하는 속성의 노드에 샤드 할당이 실패한 상황이면 주 샤드와 복제본 샤드가 모두 rack_one 노드에 할당될 수도 있다.

    일반적으로 그렇게 할 사유가 없지만 특수한 상황으로 인해 할당 의식 속성을 강제 적용해야 한다면
    cluster.routing.allocation.awareness.force 설정을 지정

    PUT _cluster/settings
    {
        "persistent" : {
            "cluster.routing.allocation.awareness.force.my_rack_id.value" : "rack_one,rack_two"
        }
    }
    이렇게 지정하면 미할당 샤드가 남아있더라도 규칙을 강제로 준수한다.

* 클러스터 단위 샤드 할당 필터링
    샤드 할당 의식 속성과 함께 적용할 수 있는 규칙 중 하나로 클러스터 단위 할당 필터링이 있다.
    노드 속성을 조합해서 특정 속성을 가진 노드에만 샤드를 할당하거나 할당하지 않도록 지정하는 규칙이다.

    PUT _cluster/settings
    {
        "persistent" : {
            "cluster.routing.allocation.include.my_rack_id" : "rack_one,rack_two"
        }
    }

    위의 예시는 my_rack_id 노드 속성으로 rack_one과 rack_two 중 적어도 하나 이상을 가진 노드에 샤드를 할당하는 규칙을 지정하는 예시다
    include 외에 require과 exclude를 쓸 수 있다.

    include: 지정한 속성들 중 적어도 하나 이상을 노드 속성으로 가진 노드에 샤드를 할당
    require: 지정한 속성들을 모두 노드 속성으로 가진 노드에 샤드를 할당
    exclude: 지정한 속성들 중 하나라도 노드 속성으로 가진 노드에는 샤드를 할당하지 않는다.

    노드 속성으로는 커스텀 속성 외에도 빌트인 내장 속성을 사용할 수 있다. 내장 속성으로는 _name, _host_ip, _publish_ip, _ip, _host_id 속성이 있다.

    클러스터 단위 샤드 할당 필터링을 사용하는 가장 전형적인 예는 특정 노드를 클러스터에서 아예 제거할 때다. 일반적으로는 노드를 바로 제거하고
    클러스터 상태를 yellow로 만든 다음에 green으로 돌아올 때까지 대기해도 별문제는 없다. 그러나 다음과 같이 클러스터 단위 샤드 할당 필터링을 사용하면
    노드를 제거하기 전에 샤드 이동을 먼저 수행할 수 있으므로 조금이지만 더 안정적으로 노드를 제거할 수 있다.

    PUT _cluster/settings
    {
        "persistent" : {
            "cluster.routing.allocation.exclude._ip" : "10.0.0.1"
        }
    }

* 인덱스 단위 샤드 할당 필터링
    샤드 할당 의식 속성, 클러스터 단위 샤드 할당 필터링과 함께 인덱스 단위 샤드 할당 필터링을 적용할 수 있다.
    특정 인덱스에 샤드 할당 필터링 설정을 지정하는 방식으로 사용한다.

    PUT my_index/_settings
    {
        "index.routing.allocation.include.my_rack_id" : "rack_one,rack_two",
        "index.routing.allocation.require.my_other_id" : "attr_one"
    }

    include, require, exclude로 속성을 지정하는 점, 커스텀 속성과 내장 속성을 모두 사용할 수 있는 점 등 모두 클러스터 단위 샤드 할당 필터링과
    동일하다. 인덱스 템플릿이나 인덱스 생명 주기 관리 정책과 연동해 관리하기 좋기 때문에 클러스터 단위 샤드 할당 필터링보다는 사용처가 넓다.

* 데이터 티어 구조
    데이터 티어 구조는 데이터 노드를 용도 및 성능별로 hot-warm-cold-frozen 티어로 구분해 클러스터를 구성하는 방법이다.
    노드의 역할로 data를 지정하지 않고 data_content, data_hot, data_warm, data_cold, data_frozen을 지정해 클러스터를 구성한다.
    성능 차이가 많이 나는 장비를 가지고 클러스터를 구성해야 하거나 최근 데이터 위주로 사용하는 방식의 시계열 데이터를 운영할 때 채택하기 좋다.

    ** 데이터 티어 구조를 위한 노드 역할
        데이터 티어 구조를 위해서는 node.roles에 data가 아니라 다른 역할을 지정해야 한다.
        데이터 티어 구조용 역할은 역할을 겸임해도 된다. 예를 들면 node.roles: ["data_content", "data_hot"] 와 같이 지정가능

        - data_content : 시계열 데이터가 아닌 데이터를 담는 노드다. 실시간 서비스용 데이터 등 높은 읽기, 쓰기 성능이 요구되는 사용처를 위한 역할
            또한 시스템 인덱스가 data_content를 요구하기 때문에 데이터 티어 구조를 채택한다면 반드시 data_content 역할을 가진 노드가 포함되어야 한다.
            데이터 스트림에 속하지 않은 인덱스는 기본적으로 data_content 노드에 배정된다.

        - data_hot : 시계열 데이터 중 가장 최근 데이터를 담당하는 노드다. 현재 업데이트가 잦고 읽기 작업도 가장 많은 상태인 데이터를 담당한다.
            데이터 티어 구조를 채택했다면 data_hot 역할을 필수로 지정해야 한다. 데이터 스트림에 속한 새 인덱스는 기본적으로 data_hot 노드에 배정

        - data_warm : data_hot에 배정된 인덱스보다 기간이 오래된 인덱스를 담당하는 노드다. 인덱스에 업데이트를 수행할 수는 있지만
            상대적으로 드물게 작업이 수행되며 성능도 덜 요구되는 상태의 인덱스를 배정받는 역할이다.

        - data_cold : 더 이상 업데이트를 수행하지 않는 읽기 전용 인덱스를 담당하는 노드다. data_warm 노드보다 드물게 조회되는 데이터를 배정받는 역할

        - data_frozen : 인덱스를 검색 가능한 스냅샷으로 변환한 뒤 이를 배정받는 노드, data_frozen 역할의 노드는 data_frozen 역할만 수행하도록
        지정하는 것이 좋다. 검색 가능한 스냅샷 기능은 엔터프라이즈 등급의 구독에서만 사용 가능

* 인덱스를 원하는 티어의 노드에 할당
    인덱스를 원하는 데이터 티어에 할당하려면 index.routing.allocation.include._tier_preference 설정을 해당 데이터 티어의 이름으로 지정하면 된다.

    PUT my_index/_settings
    {
        "index.routing.allocation.include._tier_preference" : "data_warm,data_host"
    }

    위와 같이 지정하면 먼저 data_warm 노드에 인덱스를 할당한다. 만약 data_warm 노드에 인덱스를 할당할 수 없으면 data_hot 노드에 인덱스를 할당한다.
    이 값을 명시적으로 null로 지정하면 샤드 할당에 있어 데이터 티어를 고려하지 않는다. 인덱스 생성 시 기본값은 data_content이고 데이터 스트림 내
    인덱스 생성 시 기본값은 data_host이다.

    직접 명시적으로 이 값을 수정해서 데이터 티어를 옮기는 것보다는 주로 인덱스 템플릿이나 인덱스 생명주기 관리 정책과 함께 사용해서
    자동으로 인덱스를 관리하는 방법으로 사용하는 편이다.


    305...